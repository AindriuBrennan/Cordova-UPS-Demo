"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var axios_1 = __importDefault(require("axios"));
/**
 * Base class for push registration managers.
 */
var AbstractPushRegistration = /** @class */ (function () {
    function AbstractPushRegistration(configuration) {
        if (configuration) {
            this.validationError = this._validateConfig(configuration);
            if (this.validationError) {
                console.warn(this.validationError);
                return;
            }
        }
        else {
            this.validationError = "Push configuration is missing. UPS server registration will not work.";
            console.warn(this.validationError);
            return;
        }
        // configuration is valid
        var pushConfig = configuration;
        this.platformConfig = this.getPlatformConfig(pushConfig);
        this.variantId = this.platformConfig.variantID;
        var token = window.btoa(this.variantId + ":" + this.platformConfig.variantSecret);
        this.httpClient = axios_1.default.create({
            baseURL: pushConfig.url,
            timeout: 5000,
            headers: { "Authorization": "Basic " + token }
        });
        this.init();
    }
    /**
     * Unregister an application form the UPS.
     */
    AbstractPushRegistration.prototype.unregister = function () {
        return __awaiter(this, void 0, void 0, function () {
            var storage, jsonCachedData, postData, deviceToken, endpoint;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (this.validationError) {
                            throw new Error(this.validationError);
                        }
                        storage = window.localStorage;
                        jsonCachedData = storage.getItem(AbstractPushRegistration.REGISTRATION_DATA_KEY);
                        deviceToken = "";
                        if (jsonCachedData) {
                            postData = JSON.parse(jsonCachedData);
                            deviceToken = postData.deviceToken;
                        }
                        if (!deviceToken) {
                            throw new Error("Device token should not be empty");
                        }
                        if (!this.httpClient) return [3 /*break*/, 2];
                        endpoint = AbstractPushRegistration.API_PATH + "/" + deviceToken;
                        return [4 /*yield*/, this.httpClient.delete(endpoint, {})];
                    case 1:
                        _a.sent();
                        storage.removeItem(AbstractPushRegistration.REGISTRATION_DATA_KEY);
                        return [3 /*break*/, 3];
                    case 2: 
                    // It should never happend but...
                    throw new Error("Push is not properly configured");
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Performs custom validations to the configuration.
     * If this method is overridden it gets automatically called before the standard validations are executed.
     * @param pushConfig The push configuration
     * @return undefined if no errors has been found, a string containing the detail of the error otherwise.
     */
    AbstractPushRegistration.prototype.validateConfig = function (pushConfig) {
        return undefined;
    };
    /**
     * This method is immediately called after all validations has been successfully concluded.
     * Subclasses should override this to perform custom initializations.
     */
    // tslint:disable-next-line: no-empty
    AbstractPushRegistration.prototype.init = function () { };
    /**
     * Performs general validation checks on the configuration.
     * @param pushConfig the configuration
     * @private
     */
    AbstractPushRegistration.prototype._validateConfig = function (pushConfig) {
        if (!pushConfig) {
            return "UnifiedPush server configuration not found";
        }
        if (!pushConfig.url) {
            return "UnifiedPush server URL not found";
        }
        var platformConfig = this.getPlatformConfig(pushConfig);
        if (!platformConfig) {
            return "Platform is not supported by UnifiedPush";
        }
        if (!platformConfig.variantID) {
            return "UnifiedPush VariantId is not defined";
        }
        var variantSecret = platformConfig.variantSecret;
        if (!variantSecret) {
            return "UnifiedPush VariantSecret is not defined";
        }
        return this.validateConfig(pushConfig);
    };
    AbstractPushRegistration.TYPE = "push";
    AbstractPushRegistration.REGISTRATION_DATA_KEY = "UPS_REGISTRATION_DATA";
    AbstractPushRegistration.REGISTRATION_TIMEOUT = 10000;
    AbstractPushRegistration.API_PATH = "rest/registry/device";
    return AbstractPushRegistration;
}());
exports.AbstractPushRegistration = AbstractPushRegistration;
//# sourceMappingURL=AbstractPushRegistration.js.map