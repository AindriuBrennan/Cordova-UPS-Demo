"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var AbstractPushRegistration_1 = require("../AbstractPushRegistration");
var PushUtils_1 = require("../PushUtils");
/**
 * AeroGear UPS registration SDK - Cordova based implementation
 *
 * Usage:

 * let registration = new PushRegistrationCordovaImpl(config);
 * registration.register("myAppleOrFirebaseToken");
 */
var PushRegistrationCordovaImpl = /** @class */ (function (_super) {
    __extends(PushRegistrationCordovaImpl, _super);
    function PushRegistrationCordovaImpl(config) {
        return _super.call(this, config) || this;
    }
    PushRegistrationCordovaImpl.onMessageReceived = function (onMessageReceivedCallback) {
        PushRegistrationCordovaImpl.onMessageReceivedCallback = onMessageReceivedCallback;
    };
    /**
     * Register deviceToken for Android or IOS platforms
     *
     * @param options Push registration options
     */
    PushRegistrationCordovaImpl.prototype.register = function (options) {
        var _this = this;
        if (options === void 0) { options = {}; }
        var alias = options.alias, categories = options.categories, timeout = options.timeout;
        if (this.validationError) {
            return Promise.reject(new Error(this.validationError));
        }
        return new Promise(function (resolve, reject) {
            setTimeout(function () { return reject("UnifiedPush registration timeout"); }, (timeout) ? timeout : AbstractPushRegistration_1.AbstractPushRegistration.REGISTRATION_TIMEOUT);
            _this.push.on("registration", function (data) {
                if (_this.httpClient) {
                    var postData_1 = {
                        "deviceToken": data.registrationId,
                        "deviceType": window.device.model,
                        "operatingSystem": window.device.platform,
                        "osVersion": window.device.version,
                        "alias": alias,
                        "categories": categories
                    };
                    return _this.httpClient.post(AbstractPushRegistration_1.AbstractPushRegistration.API_PATH, postData_1)
                        .then(function () {
                        if (PushUtils_1.isCordovaAndroid() && _this.variantId) {
                            _this.subscribeToFirebaseTopic(_this.variantId);
                            if (options.categories) {
                                for (var _i = 0, _a = options.categories; _i < _a.length; _i++) {
                                    var category = _a[_i];
                                    _this.subscribeToFirebaseTopic(category);
                                }
                            }
                        }
                        var storage = window.localStorage;
                        storage.setItem(AbstractPushRegistration_1.AbstractPushRegistration.REGISTRATION_DATA_KEY, JSON.stringify(postData_1));
                        _this.push
                            .on("notification", function (notification) {
                            if (PushRegistrationCordovaImpl.onMessageReceivedCallback) {
                                PushRegistrationCordovaImpl.onMessageReceivedCallback(notification);
                            }
                        });
                        resolve();
                    })
                        .catch(reject);
                }
                else {
                    // It should never happend but...
                    return reject(new Error("Push is not properly configured"));
                }
            });
        });
    };
    /**
     * Unregister device for Android or IOS platforms
     */
    PushRegistrationCordovaImpl.prototype.unregister = function () {
        var _this = this;
        var storage = window.localStorage;
        var jsonCachedData = storage.getItem(AbstractPushRegistration_1.AbstractPushRegistration.REGISTRATION_DATA_KEY);
        return new Promise(function (resolve, reject) {
            _super.prototype.unregister.call(_this).then(function () {
                var postData;
                var categories;
                if (jsonCachedData) {
                    postData = JSON.parse(jsonCachedData);
                    categories = postData.categories;
                }
                if (PushUtils_1.isCordovaAndroid() && _this.variantId) {
                    _this.unsubscribeToFirebaseTopic(_this.variantId);
                    if (categories) {
                        for (var _i = 0, categories_1 = categories; _i < categories_1.length; _i++) {
                            var category = categories_1[_i];
                            _this.unsubscribeToFirebaseTopic(category);
                        }
                    }
                }
                resolve();
            }).catch(reject);
        });
    };
    PushRegistrationCordovaImpl.prototype.getPlatformConfig = function (pushConfig) {
        if (PushUtils_1.isCordovaAndroid()) {
            return pushConfig.android;
        }
        else if (PushUtils_1.isCordovaIOS()) {
            return pushConfig.ios;
        }
        return undefined;
    };
    PushRegistrationCordovaImpl.prototype.validateConfig = function () {
        if (!window || !window.device || !window.PushNotification) {
            return "@aerogear/cordova-plugin-aerogear-push plugin not installed.";
        }
        return undefined;
    };
    PushRegistrationCordovaImpl.prototype.init = function () {
        this.push = window.PushNotification.init({
            android: {},
            ios: {
                alert: true,
                badge: true,
                sound: true
            }
        });
    };
    PushRegistrationCordovaImpl.prototype.subscribeToFirebaseTopic = function (topic) {
        this.push.subscribe(topic, function () {
            console.warn("FCM topic: " + topic + " subscribed");
        }, function (e) {
            console.warn("error:", e);
        });
    };
    PushRegistrationCordovaImpl.prototype.unsubscribeToFirebaseTopic = function (topic) {
        this.push.unsubscribe(topic, function () {
            console.warn("FCM topic: " + topic + " unsubscribed");
        }, function (e) {
            console.warn("error:", e);
        });
    };
    return PushRegistrationCordovaImpl;
}(AbstractPushRegistration_1.AbstractPushRegistration));
exports.PushRegistrationCordovaImpl = PushRegistrationCordovaImpl;
//# sourceMappingURL=PushRegistrationCordovaImpl.js.map