import { PushRegistrationOptions } from "./PushRegistration";
import { PushRegistrationInterface } from "./PushRegistrationInterface";
import { AxiosInstance } from "axios";
import { PushInitConfig, PushVariant } from "./PushInitConfig";
/**
 * Base class for push registration managers.
 */
export declare abstract class AbstractPushRegistration implements PushRegistrationInterface {
    static readonly TYPE: string;
    static readonly REGISTRATION_DATA_KEY = "UPS_REGISTRATION_DATA";
    protected static readonly REGISTRATION_TIMEOUT = 10000;
    protected static readonly API_PATH: string;
    protected readonly variantId?: string;
    protected readonly validationError?: string | undefined;
    protected readonly httpClient?: AxiosInstance;
    protected readonly platformConfig: any;
    protected constructor(configuration: PushInitConfig);
    /**
     * Registers an application to the UPS.
     * @param options
     */
    abstract register(options: PushRegistrationOptions): Promise<void>;
    /**
     * Unregister an application form the UPS.
     */
    unregister(): Promise<void>;
    /**
     * Extracts the platform configuration from the current push configuration object.
     * @param pushConfig The push configuration object.
     */
    abstract getPlatformConfig(pushConfig: PushInitConfig): PushVariant | undefined;
    /**
     * Performs custom validations to the configuration.
     * If this method is overridden it gets automatically called before the standard validations are executed.
     * @param pushConfig The push configuration
     * @return undefined if no errors has been found, a string containing the detail of the error otherwise.
     */
    protected validateConfig(pushConfig: PushInitConfig): string | undefined;
    /**
     * This method is immediately called after all validations has been successfully concluded.
     * Subclasses should override this to perform custom initializations.
     */
    protected init(): void;
    /**
     * Performs general validation checks on the configuration.
     * @param pushConfig the configuration
     * @private
     */
    private _validateConfig;
}
